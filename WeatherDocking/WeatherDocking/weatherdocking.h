/* F:\OPT8443\webservice\WeatherDocking\WeatherDocking\weatherdocking.h
   Generated by wsdl2h 2.8.124 from http://ws.webxml.com.cn/WebServices/WeatherWS.asmx?wsdl and typemap.dat
   2022-12-22 02:01:30 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2022, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on F:\OPT8443\webservice\WeatherDocking\WeatherDocking\weatherdocking.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/

/* WSDL Documentation:

<a href="http://www.webxml.com.cn/" target="_blank">WebXml.com.cn</a> <strong>2400Web</strong>23001002.5<br
/> WEB <a href="http://www.webxml.com.cn/"
target="_blank">http://www.webxml.com.cn/</a> <br /><br
/><img alt="PDF" title="PDF file" src="http://www.webxml.com.cn/images/icon/pdf.gif"
style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/files/WeatherWsHelp.pdf"
target="_blank"></a> &nbsp;&nbsp;&nbsp; <img alt="ZIP" title="ZIP
file" src="http://www.webxml.com.cn/images/icon/zip.gif" style="vertical-align:
middle;" /> <a href="http://www.webxml.com.cn/files/about_city.zip"></a>
&nbsp;&nbsp;&nbsp; <img alt="ZIP" title="ZIP file" src="http://www.webxml.com.cn/images/icon/zip.gif"
style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/files/city_photo.zip"></a>
&nbsp;&nbsp;&nbsp; <img alt="HTML" title="HTML file" src="http://www.webxml.com.cn/images/icon/html.gif"
style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/zh_cn/weather_icon.aspx"
target="_blank"></a><br />&nbsp;
*/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER typemap variable:                                               *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://WebXml.com.cn/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://WebXml.com.cn/"
//gsoap ns1   schema namespace:	http://WebXml.com.cn/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in element "xs:schema".
typedef _XML _xsd__schema;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class ns1__ArrayOfString;

class _ns1__getRegionDataset;

class _ns1__getRegionDatasetResponse;

class _ns1__getRegionProvince;

class _ns1__getRegionProvinceResponse;

class _ns1__getRegionCountry;

class _ns1__getRegionCountryResponse;

class _ns1__getSupportCityDataset;

class _ns1__getSupportCityDatasetResponse;

class _ns1__getSupportCityString;

class _ns1__getSupportCityStringResponse;

class _ns1__getWeather;

class _ns1__getWeatherResponse;

class _ns1__DataSet;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/

/// @brief "http://WebXml.com.cn/":ArrayOfString is a complexType.
///
/// @note class ns1__ArrayOfString operations:
/// - ns1__ArrayOfString* soap_new_ns1__ArrayOfString(soap*) allocate and default initialize
/// - ns1__ArrayOfString* soap_new_ns1__ArrayOfString(soap*, int num) allocate and default initialize an array
/// - ns1__ArrayOfString* soap_new_req_ns1__ArrayOfString(soap*, ...) allocate, set required members
/// - ns1__ArrayOfString* soap_new_set_ns1__ArrayOfString(soap*, ...) allocate, set all public members
/// - ns1__ArrayOfString::soap_default(soap*) default initialize members
/// - int soap_read_ns1__ArrayOfString(soap*, ns1__ArrayOfString*) deserialize from a stream
/// - int soap_write_ns1__ArrayOfString(soap*, ns1__ArrayOfString*) serialize to a stream
/// - ns1__ArrayOfString* ns1__ArrayOfString::soap_dup(soap*) returns deep copy of ns1__ArrayOfString, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns1__ArrayOfString::soap_del() deep deletes ns1__ArrayOfString data members, use only after ns1__ArrayOfString::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns1__ArrayOfString::soap_type() returns SOAP_TYPE_ns1__ArrayOfString or derived type identifier
class ns1__ArrayOfString
{ public:
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > string                         0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getRegionDataset
/// @brief "http://WebXml.com.cn/":getRegionDataset is a complexType.
///
/// @note class _ns1__getRegionDataset operations:
/// - _ns1__getRegionDataset* soap_new__ns1__getRegionDataset(soap*) allocate and default initialize
/// - _ns1__getRegionDataset* soap_new__ns1__getRegionDataset(soap*, int num) allocate and default initialize an array
/// - _ns1__getRegionDataset* soap_new_req__ns1__getRegionDataset(soap*, ...) allocate, set required members
/// - _ns1__getRegionDataset* soap_new_set__ns1__getRegionDataset(soap*, ...) allocate, set all public members
/// - _ns1__getRegionDataset::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getRegionDataset(soap*, _ns1__getRegionDataset*) deserialize from a stream
/// - int soap_write__ns1__getRegionDataset(soap*, _ns1__getRegionDataset*) serialize to a stream
/// - _ns1__getRegionDataset* _ns1__getRegionDataset::soap_dup(soap*) returns deep copy of _ns1__getRegionDataset, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getRegionDataset::soap_del() deep deletes _ns1__getRegionDataset data members, use only after _ns1__getRegionDataset::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getRegionDataset::soap_type() returns SOAP_TYPE__ns1__getRegionDataset or derived type identifier
class _ns1__getRegionDataset
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getRegionDatasetResponse
/// @brief "http://WebXml.com.cn/":getRegionDatasetResponse is a complexType.
///
/// @note class _ns1__getRegionDatasetResponse operations:
/// - _ns1__getRegionDatasetResponse* soap_new__ns1__getRegionDatasetResponse(soap*) allocate and default initialize
/// - _ns1__getRegionDatasetResponse* soap_new__ns1__getRegionDatasetResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__getRegionDatasetResponse* soap_new_req__ns1__getRegionDatasetResponse(soap*, ...) allocate, set required members
/// - _ns1__getRegionDatasetResponse* soap_new_set__ns1__getRegionDatasetResponse(soap*, ...) allocate, set all public members
/// - _ns1__getRegionDatasetResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getRegionDatasetResponse(soap*, _ns1__getRegionDatasetResponse*) deserialize from a stream
/// - int soap_write__ns1__getRegionDatasetResponse(soap*, _ns1__getRegionDatasetResponse*) serialize to a stream
/// - _ns1__getRegionDatasetResponse* _ns1__getRegionDatasetResponse::soap_dup(soap*) returns deep copy of _ns1__getRegionDatasetResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getRegionDatasetResponse::soap_del() deep deletes _ns1__getRegionDatasetResponse data members, use only after _ns1__getRegionDatasetResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getRegionDatasetResponse::soap_type() returns SOAP_TYPE__ns1__getRegionDatasetResponse or derived type identifier
class _ns1__getRegionDatasetResponse
{ public:
/// @note class _ns1__getRegionDatasetResponse_getRegionDatasetResult operations:
/// - _ns1__getRegionDatasetResponse_getRegionDatasetResult* soap_new__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap*) allocate and default initialize
/// - _ns1__getRegionDatasetResponse_getRegionDatasetResult* soap_new__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap*, int num) allocate and default initialize an array
/// - _ns1__getRegionDatasetResponse_getRegionDatasetResult* soap_new_req__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap*, ...) allocate, set required members
/// - _ns1__getRegionDatasetResponse_getRegionDatasetResult* soap_new_set__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap*, ...) allocate, set all public members
/// - _ns1__getRegionDatasetResponse_getRegionDatasetResult::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap*, _ns1__getRegionDatasetResponse_getRegionDatasetResult*) deserialize from a stream
/// - int soap_write__ns1__getRegionDatasetResponse_getRegionDatasetResult(soap*, _ns1__getRegionDatasetResponse_getRegionDatasetResult*) serialize to a stream
/// - _ns1__getRegionDatasetResponse_getRegionDatasetResult* _ns1__getRegionDatasetResponse_getRegionDatasetResult::soap_dup(soap*) returns deep copy of _ns1__getRegionDatasetResponse_getRegionDatasetResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getRegionDatasetResponse_getRegionDatasetResult::soap_del() deep deletes _ns1__getRegionDatasetResponse_getRegionDatasetResult data members, use only after _ns1__getRegionDatasetResponse_getRegionDatasetResult::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getRegionDatasetResponse_getRegionDatasetResult::soap_type() returns SOAP_TYPE__ns1__getRegionDatasetResponse_getRegionDatasetResult or derived type identifier
    class _ns1__getRegionDatasetResponse_getRegionDatasetResult
    { public:
/// Imported element reference xs:schema.
    _xsd__schema                         xsd__schema                    1;	///< Required element.
/// <any namespace="##any">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Store any element content in XML string.
    }                                   *getRegionDatasetResult         0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getRegionProvince
/// @brief "http://WebXml.com.cn/":getRegionProvince is a complexType.
///
/// @note class _ns1__getRegionProvince operations:
/// - _ns1__getRegionProvince* soap_new__ns1__getRegionProvince(soap*) allocate and default initialize
/// - _ns1__getRegionProvince* soap_new__ns1__getRegionProvince(soap*, int num) allocate and default initialize an array
/// - _ns1__getRegionProvince* soap_new_req__ns1__getRegionProvince(soap*, ...) allocate, set required members
/// - _ns1__getRegionProvince* soap_new_set__ns1__getRegionProvince(soap*, ...) allocate, set all public members
/// - _ns1__getRegionProvince::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getRegionProvince(soap*, _ns1__getRegionProvince*) deserialize from a stream
/// - int soap_write__ns1__getRegionProvince(soap*, _ns1__getRegionProvince*) serialize to a stream
/// - _ns1__getRegionProvince* _ns1__getRegionProvince::soap_dup(soap*) returns deep copy of _ns1__getRegionProvince, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getRegionProvince::soap_del() deep deletes _ns1__getRegionProvince data members, use only after _ns1__getRegionProvince::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getRegionProvince::soap_type() returns SOAP_TYPE__ns1__getRegionProvince or derived type identifier
class _ns1__getRegionProvince
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getRegionProvinceResponse
/// @brief "http://WebXml.com.cn/":getRegionProvinceResponse is a complexType.
///
/// @note class _ns1__getRegionProvinceResponse operations:
/// - _ns1__getRegionProvinceResponse* soap_new__ns1__getRegionProvinceResponse(soap*) allocate and default initialize
/// - _ns1__getRegionProvinceResponse* soap_new__ns1__getRegionProvinceResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__getRegionProvinceResponse* soap_new_req__ns1__getRegionProvinceResponse(soap*, ...) allocate, set required members
/// - _ns1__getRegionProvinceResponse* soap_new_set__ns1__getRegionProvinceResponse(soap*, ...) allocate, set all public members
/// - _ns1__getRegionProvinceResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getRegionProvinceResponse(soap*, _ns1__getRegionProvinceResponse*) deserialize from a stream
/// - int soap_write__ns1__getRegionProvinceResponse(soap*, _ns1__getRegionProvinceResponse*) serialize to a stream
/// - _ns1__getRegionProvinceResponse* _ns1__getRegionProvinceResponse::soap_dup(soap*) returns deep copy of _ns1__getRegionProvinceResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getRegionProvinceResponse::soap_del() deep deletes _ns1__getRegionProvinceResponse data members, use only after _ns1__getRegionProvinceResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getRegionProvinceResponse::soap_type() returns SOAP_TYPE__ns1__getRegionProvinceResponse or derived type identifier
class _ns1__getRegionProvinceResponse
{ public:
/// Element "getRegionProvinceResult" of type "http://WebXml.com.cn/":ArrayOfString.
    ns1__ArrayOfString*                  getRegionProvinceResult        0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getRegionCountry
/// @brief "http://WebXml.com.cn/":getRegionCountry is a complexType.
///
/// @note class _ns1__getRegionCountry operations:
/// - _ns1__getRegionCountry* soap_new__ns1__getRegionCountry(soap*) allocate and default initialize
/// - _ns1__getRegionCountry* soap_new__ns1__getRegionCountry(soap*, int num) allocate and default initialize an array
/// - _ns1__getRegionCountry* soap_new_req__ns1__getRegionCountry(soap*, ...) allocate, set required members
/// - _ns1__getRegionCountry* soap_new_set__ns1__getRegionCountry(soap*, ...) allocate, set all public members
/// - _ns1__getRegionCountry::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getRegionCountry(soap*, _ns1__getRegionCountry*) deserialize from a stream
/// - int soap_write__ns1__getRegionCountry(soap*, _ns1__getRegionCountry*) serialize to a stream
/// - _ns1__getRegionCountry* _ns1__getRegionCountry::soap_dup(soap*) returns deep copy of _ns1__getRegionCountry, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getRegionCountry::soap_del() deep deletes _ns1__getRegionCountry data members, use only after _ns1__getRegionCountry::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getRegionCountry::soap_type() returns SOAP_TYPE__ns1__getRegionCountry or derived type identifier
class _ns1__getRegionCountry
{ public:
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getRegionCountryResponse
/// @brief "http://WebXml.com.cn/":getRegionCountryResponse is a complexType.
///
/// @note class _ns1__getRegionCountryResponse operations:
/// - _ns1__getRegionCountryResponse* soap_new__ns1__getRegionCountryResponse(soap*) allocate and default initialize
/// - _ns1__getRegionCountryResponse* soap_new__ns1__getRegionCountryResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__getRegionCountryResponse* soap_new_req__ns1__getRegionCountryResponse(soap*, ...) allocate, set required members
/// - _ns1__getRegionCountryResponse* soap_new_set__ns1__getRegionCountryResponse(soap*, ...) allocate, set all public members
/// - _ns1__getRegionCountryResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getRegionCountryResponse(soap*, _ns1__getRegionCountryResponse*) deserialize from a stream
/// - int soap_write__ns1__getRegionCountryResponse(soap*, _ns1__getRegionCountryResponse*) serialize to a stream
/// - _ns1__getRegionCountryResponse* _ns1__getRegionCountryResponse::soap_dup(soap*) returns deep copy of _ns1__getRegionCountryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getRegionCountryResponse::soap_del() deep deletes _ns1__getRegionCountryResponse data members, use only after _ns1__getRegionCountryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getRegionCountryResponse::soap_type() returns SOAP_TYPE__ns1__getRegionCountryResponse or derived type identifier
class _ns1__getRegionCountryResponse
{ public:
/// Element "getRegionCountryResult" of type "http://WebXml.com.cn/":ArrayOfString.
    ns1__ArrayOfString*                  getRegionCountryResult         0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportCityDataset
/// @brief "http://WebXml.com.cn/":getSupportCityDataset is a complexType.
///
/// @note class _ns1__getSupportCityDataset operations:
/// - _ns1__getSupportCityDataset* soap_new__ns1__getSupportCityDataset(soap*) allocate and default initialize
/// - _ns1__getSupportCityDataset* soap_new__ns1__getSupportCityDataset(soap*, int num) allocate and default initialize an array
/// - _ns1__getSupportCityDataset* soap_new_req__ns1__getSupportCityDataset(soap*, ...) allocate, set required members
/// - _ns1__getSupportCityDataset* soap_new_set__ns1__getSupportCityDataset(soap*, ...) allocate, set all public members
/// - _ns1__getSupportCityDataset::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getSupportCityDataset(soap*, _ns1__getSupportCityDataset*) deserialize from a stream
/// - int soap_write__ns1__getSupportCityDataset(soap*, _ns1__getSupportCityDataset*) serialize to a stream
/// - _ns1__getSupportCityDataset* _ns1__getSupportCityDataset::soap_dup(soap*) returns deep copy of _ns1__getSupportCityDataset, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getSupportCityDataset::soap_del() deep deletes _ns1__getSupportCityDataset data members, use only after _ns1__getSupportCityDataset::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getSupportCityDataset::soap_type() returns SOAP_TYPE__ns1__getSupportCityDataset or derived type identifier
class _ns1__getSupportCityDataset
{ public:
/// Element "theRegionCode" of type xs:string.
    std::string*                         theRegionCode                  0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportCityDatasetResponse
/// @brief "http://WebXml.com.cn/":getSupportCityDatasetResponse is a complexType.
///
/// @note class _ns1__getSupportCityDatasetResponse operations:
/// - _ns1__getSupportCityDatasetResponse* soap_new__ns1__getSupportCityDatasetResponse(soap*) allocate and default initialize
/// - _ns1__getSupportCityDatasetResponse* soap_new__ns1__getSupportCityDatasetResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__getSupportCityDatasetResponse* soap_new_req__ns1__getSupportCityDatasetResponse(soap*, ...) allocate, set required members
/// - _ns1__getSupportCityDatasetResponse* soap_new_set__ns1__getSupportCityDatasetResponse(soap*, ...) allocate, set all public members
/// - _ns1__getSupportCityDatasetResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getSupportCityDatasetResponse(soap*, _ns1__getSupportCityDatasetResponse*) deserialize from a stream
/// - int soap_write__ns1__getSupportCityDatasetResponse(soap*, _ns1__getSupportCityDatasetResponse*) serialize to a stream
/// - _ns1__getSupportCityDatasetResponse* _ns1__getSupportCityDatasetResponse::soap_dup(soap*) returns deep copy of _ns1__getSupportCityDatasetResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getSupportCityDatasetResponse::soap_del() deep deletes _ns1__getSupportCityDatasetResponse data members, use only after _ns1__getSupportCityDatasetResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getSupportCityDatasetResponse::soap_type() returns SOAP_TYPE__ns1__getSupportCityDatasetResponse or derived type identifier
class _ns1__getSupportCityDatasetResponse
{ public:
/// @note class _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult operations:
/// - _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult* soap_new__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap*) allocate and default initialize
/// - _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult* soap_new__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap*, int num) allocate and default initialize an array
/// - _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult* soap_new_req__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap*, ...) allocate, set required members
/// - _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult* soap_new_set__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap*, ...) allocate, set all public members
/// - _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap*, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult*) deserialize from a stream
/// - int soap_write__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult(soap*, _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult*) serialize to a stream
/// - _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult* _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::soap_dup(soap*) returns deep copy of _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::soap_del() deep deletes _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult data members, use only after _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult::soap_type() returns SOAP_TYPE__ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult or derived type identifier
    class _ns1__getSupportCityDatasetResponse_getSupportCityDatasetResult
    { public:
/// Imported element reference xs:schema.
    _xsd__schema                         xsd__schema                    1;	///< Required element.
/// <any namespace="##any">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Store any element content in XML string.
    }                                   *getSupportCityDatasetResult    0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportCityString
/// @brief "http://WebXml.com.cn/":getSupportCityString is a complexType.
///
/// @note class _ns1__getSupportCityString operations:
/// - _ns1__getSupportCityString* soap_new__ns1__getSupportCityString(soap*) allocate and default initialize
/// - _ns1__getSupportCityString* soap_new__ns1__getSupportCityString(soap*, int num) allocate and default initialize an array
/// - _ns1__getSupportCityString* soap_new_req__ns1__getSupportCityString(soap*, ...) allocate, set required members
/// - _ns1__getSupportCityString* soap_new_set__ns1__getSupportCityString(soap*, ...) allocate, set all public members
/// - _ns1__getSupportCityString::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getSupportCityString(soap*, _ns1__getSupportCityString*) deserialize from a stream
/// - int soap_write__ns1__getSupportCityString(soap*, _ns1__getSupportCityString*) serialize to a stream
/// - _ns1__getSupportCityString* _ns1__getSupportCityString::soap_dup(soap*) returns deep copy of _ns1__getSupportCityString, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getSupportCityString::soap_del() deep deletes _ns1__getSupportCityString data members, use only after _ns1__getSupportCityString::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getSupportCityString::soap_type() returns SOAP_TYPE__ns1__getSupportCityString or derived type identifier
class _ns1__getSupportCityString
{ public:
/// Element "theRegionCode" of type xs:string.
    std::string*                         theRegionCode                  0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getSupportCityStringResponse
/// @brief "http://WebXml.com.cn/":getSupportCityStringResponse is a complexType.
///
/// @note class _ns1__getSupportCityStringResponse operations:
/// - _ns1__getSupportCityStringResponse* soap_new__ns1__getSupportCityStringResponse(soap*) allocate and default initialize
/// - _ns1__getSupportCityStringResponse* soap_new__ns1__getSupportCityStringResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__getSupportCityStringResponse* soap_new_req__ns1__getSupportCityStringResponse(soap*, ...) allocate, set required members
/// - _ns1__getSupportCityStringResponse* soap_new_set__ns1__getSupportCityStringResponse(soap*, ...) allocate, set all public members
/// - _ns1__getSupportCityStringResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getSupportCityStringResponse(soap*, _ns1__getSupportCityStringResponse*) deserialize from a stream
/// - int soap_write__ns1__getSupportCityStringResponse(soap*, _ns1__getSupportCityStringResponse*) serialize to a stream
/// - _ns1__getSupportCityStringResponse* _ns1__getSupportCityStringResponse::soap_dup(soap*) returns deep copy of _ns1__getSupportCityStringResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getSupportCityStringResponse::soap_del() deep deletes _ns1__getSupportCityStringResponse data members, use only after _ns1__getSupportCityStringResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getSupportCityStringResponse::soap_type() returns SOAP_TYPE__ns1__getSupportCityStringResponse or derived type identifier
class _ns1__getSupportCityStringResponse
{ public:
/// Element "getSupportCityStringResult" of type "http://WebXml.com.cn/":ArrayOfString.
    ns1__ArrayOfString*                  getSupportCityStringResult     0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getWeather
/// @brief "http://WebXml.com.cn/":getWeather is a complexType.
///
/// @note class _ns1__getWeather operations:
/// - _ns1__getWeather* soap_new__ns1__getWeather(soap*) allocate and default initialize
/// - _ns1__getWeather* soap_new__ns1__getWeather(soap*, int num) allocate and default initialize an array
/// - _ns1__getWeather* soap_new_req__ns1__getWeather(soap*, ...) allocate, set required members
/// - _ns1__getWeather* soap_new_set__ns1__getWeather(soap*, ...) allocate, set all public members
/// - _ns1__getWeather::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getWeather(soap*, _ns1__getWeather*) deserialize from a stream
/// - int soap_write__ns1__getWeather(soap*, _ns1__getWeather*) serialize to a stream
/// - _ns1__getWeather* _ns1__getWeather::soap_dup(soap*) returns deep copy of _ns1__getWeather, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getWeather::soap_del() deep deletes _ns1__getWeather data members, use only after _ns1__getWeather::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getWeather::soap_type() returns SOAP_TYPE__ns1__getWeather or derived type identifier
class _ns1__getWeather
{ public:
/// Element "theCityCode" of type xs:string.
    std::string*                         theCityCode                    0;	///< Optional element.
/// Element "theUserID" of type xs:string.
    std::string*                         theUserID                      0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":getWeatherResponse
/// @brief "http://WebXml.com.cn/":getWeatherResponse is a complexType.
///
/// @note class _ns1__getWeatherResponse operations:
/// - _ns1__getWeatherResponse* soap_new__ns1__getWeatherResponse(soap*) allocate and default initialize
/// - _ns1__getWeatherResponse* soap_new__ns1__getWeatherResponse(soap*, int num) allocate and default initialize an array
/// - _ns1__getWeatherResponse* soap_new_req__ns1__getWeatherResponse(soap*, ...) allocate, set required members
/// - _ns1__getWeatherResponse* soap_new_set__ns1__getWeatherResponse(soap*, ...) allocate, set all public members
/// - _ns1__getWeatherResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__getWeatherResponse(soap*, _ns1__getWeatherResponse*) deserialize from a stream
/// - int soap_write__ns1__getWeatherResponse(soap*, _ns1__getWeatherResponse*) serialize to a stream
/// - _ns1__getWeatherResponse* _ns1__getWeatherResponse::soap_dup(soap*) returns deep copy of _ns1__getWeatherResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getWeatherResponse::soap_del() deep deletes _ns1__getWeatherResponse data members, use only after _ns1__getWeatherResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__getWeatherResponse::soap_type() returns SOAP_TYPE__ns1__getWeatherResponse or derived type identifier
class _ns1__getWeatherResponse
{ public:
/// Element "getWeatherResult" of type "http://WebXml.com.cn/":ArrayOfString.
    ns1__ArrayOfString*                  getWeatherResult               0;	///< Optional element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://WebXml.com.cn/":DataSet
/// @brief "http://WebXml.com.cn/":DataSet is a complexType.
///
/// @note class _ns1__DataSet operations:
/// - _ns1__DataSet* soap_new__ns1__DataSet(soap*) allocate and default initialize
/// - _ns1__DataSet* soap_new__ns1__DataSet(soap*, int num) allocate and default initialize an array
/// - _ns1__DataSet* soap_new_req__ns1__DataSet(soap*, ...) allocate, set required members
/// - _ns1__DataSet* soap_new_set__ns1__DataSet(soap*, ...) allocate, set all public members
/// - _ns1__DataSet::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DataSet(soap*, _ns1__DataSet*) deserialize from a stream
/// - int soap_write__ns1__DataSet(soap*, _ns1__DataSet*) serialize to a stream
/// - _ns1__DataSet* _ns1__DataSet::soap_dup(soap*) returns deep copy of _ns1__DataSet, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DataSet::soap_del() deep deletes _ns1__DataSet data members, use only after _ns1__DataSet::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__DataSet::soap_type() returns SOAP_TYPE__ns1__DataSet or derived type identifier
class _ns1__DataSet
{ public:
/// Imported element reference xs:schema.
    _xsd__schema                         xsd__schema                    1;	///< Required element.
/// <any namespace="##any">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
    _XML                                 __any                         0;	///< Store any element content in XML string.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://WebXml.com.cn/":ArrayOfString of type "http://WebXml.com.cn/":ArrayOfString.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://WebXml.com.cn/                                                    *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	WeatherWSSoap 
//gsoap ns1  service type:	WeatherWSSoap 
//gsoap ns1  service port:	http://ws.webxml.com.cn/WebServices/WeatherWS.asmx 
//gsoap ns1  service namespace:	http://WebXml.com.cn/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_documentation Documentation
<a href="http://www.webxml.com.cn/" target="_blank">WebXml.com.cn</a> <strong>2400Web</strong>23001002.5<br
/> WEB <a href="http://www.webxml.com.cn/"
target="_blank">http://www.webxml.com.cn/</a> <br /><br
/><img alt="PDF" title="PDF file" src="http://www.webxml.com.cn/images/icon/pdf.gif"
style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/files/WeatherWsHelp.pdf"
target="_blank"></a> &nbsp;&nbsp;&nbsp; <img alt="ZIP" title="ZIP
file" src="http://www.webxml.com.cn/images/icon/zip.gif" style="vertical-align:
middle;" /> <a href="http://www.webxml.com.cn/files/about_city.zip"></a>
&nbsp;&nbsp;&nbsp; <img alt="ZIP" title="ZIP file" src="http://www.webxml.com.cn/images/icon/zip.gif"
style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/files/city_photo.zip"></a>
&nbsp;&nbsp;&nbsp; <img alt="HTML" title="HTML file" src="http://www.webxml.com.cn/images/icon/html.gif"
style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/zh_cn/weather_icon.aspx"
target="_blank"></a><br />&nbsp;

@section Service_bindings Service Bindings

  - @ref WeatherWSSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page WeatherWSSoap Binding "WeatherWSSoap"

@section WeatherWSSoap_service Service Documentation "WeatherWSSoap"
<a href="http://www.webxml.com.cn/" target="_blank">WebXml.com.cn</a> <strong>2400Web</strong>23001002.5<br
/> WEB <a href="http://www.webxml.com.cn/"
target="_blank">http://www.webxml.com.cn/</a> <br /><br
/><img alt="PDF" title="PDF file" src="http://www.webxml.com.cn/images/icon/pdf.gif"
style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/files/WeatherWsHelp.pdf"
target="_blank"></a> &nbsp;&nbsp;&nbsp; <img alt="ZIP" title="ZIP
file" src="http://www.webxml.com.cn/images/icon/zip.gif" style="vertical-align:
middle;" /> <a href="http://www.webxml.com.cn/files/about_city.zip"></a>
&nbsp;&nbsp;&nbsp; <img alt="ZIP" title="ZIP file" src="http://www.webxml.com.cn/images/icon/zip.gif"
style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/files/city_photo.zip"></a>
&nbsp;&nbsp;&nbsp; <img alt="HTML" title="HTML file" src="http://www.webxml.com.cn/images/icon/html.gif"
style="vertical-align: middle;" /> <a href="http://www.webxml.com.cn/zh_cn/weather_icon.aspx"
target="_blank"></a><br />&nbsp;

@section WeatherWSSoap_operations Operations of Binding "WeatherWSSoap"

  - @ref __ns1__getRegionDataset

  - @ref __ns1__getRegionProvince

  - @ref __ns1__getRegionCountry

  - @ref __ns1__getSupportCityDataset

  - @ref __ns1__getSupportCityString

  - @ref __ns1__getWeather

  - @ref __ns1__getRegionDataset_

  - @ref __ns1__getRegionProvince_

  - @ref __ns1__getRegionCountry_

  - @ref __ns1__getSupportCityDataset_

  - @ref __ns1__getSupportCityString_

  - @ref __ns1__getWeather_

@section WeatherWSSoap_ports Default endpoints of Binding "WeatherWSSoap"

  - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   WeatherWSSoap                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRegionDataset                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getRegionDataset" of service binding "WeatherWSSoap".
<br /><h3>ID</h3><p>DataSet</p><br
/>

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getRegionDataset"

  - Addressing input action: "http://WebXml.com.cn/getRegionDataset"

  - Addressing output action: "http://WebXml.com.cn/getRegionDatasetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRegionDataset(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getRegionDataset*             ns1__getRegionDataset,
    // output parameters:
    _ns1__getRegionDatasetResponse     &ns1__getRegionDatasetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRegionDataset(
    struct soap *soap,
    // input parameters:
    _ns1__getRegionDataset*             ns1__getRegionDataset,
    // output parameters:
    _ns1__getRegionDatasetResponse     &ns1__getRegionDatasetResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWSSoapProxy.h generated with soapcpp2):
@code
  class WeatherWSSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWSSoapService.h generated with soapcpp2):
@code
  class WeatherWSSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRegionDataset SOAP
//gsoap ns1  service method-style:	getRegionDataset document
//gsoap ns1  service method-encoding:	getRegionDataset literal
//gsoap ns1  service method-input-action:	getRegionDataset http://WebXml.com.cn/getRegionDataset
//gsoap ns1  service method-output-action:	getRegionDataset http://WebXml.com.cn/getRegionDatasetResponse
int __ns1__getRegionDataset(
    _ns1__getRegionDataset*             ns1__getRegionDataset,	///< Input parameter
    _ns1__getRegionDatasetResponse     &ns1__getRegionDatasetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRegionProvince                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getRegionProvince" of service binding "WeatherWSSoap".
<br /><h3>ID</h3><p></p><br
/>

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getRegionProvince"

  - Addressing input action: "http://WebXml.com.cn/getRegionProvince"

  - Addressing output action: "http://WebXml.com.cn/getRegionProvinceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRegionProvince(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getRegionProvince*            ns1__getRegionProvince,
    // output parameters:
    _ns1__getRegionProvinceResponse    &ns1__getRegionProvinceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRegionProvince(
    struct soap *soap,
    // input parameters:
    _ns1__getRegionProvince*            ns1__getRegionProvince,
    // output parameters:
    _ns1__getRegionProvinceResponse    &ns1__getRegionProvinceResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWSSoapProxy.h generated with soapcpp2):
@code
  class WeatherWSSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWSSoapService.h generated with soapcpp2):
@code
  class WeatherWSSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRegionProvince SOAP
//gsoap ns1  service method-style:	getRegionProvince document
//gsoap ns1  service method-encoding:	getRegionProvince literal
//gsoap ns1  service method-input-action:	getRegionProvince http://WebXml.com.cn/getRegionProvince
//gsoap ns1  service method-output-action:	getRegionProvince http://WebXml.com.cn/getRegionProvinceResponse
int __ns1__getRegionProvince(
    _ns1__getRegionProvince*            ns1__getRegionProvince,	///< Input parameter
    _ns1__getRegionProvinceResponse    &ns1__getRegionProvinceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRegionCountry                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getRegionCountry" of service binding "WeatherWSSoap".
<br /><h3>ID</h3><p></p><br
/>

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getRegionCountry"

  - Addressing input action: "http://WebXml.com.cn/getRegionCountry"

  - Addressing output action: "http://WebXml.com.cn/getRegionCountryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRegionCountry(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getRegionCountry*             ns1__getRegionCountry,
    // output parameters:
    _ns1__getRegionCountryResponse     &ns1__getRegionCountryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRegionCountry(
    struct soap *soap,
    // input parameters:
    _ns1__getRegionCountry*             ns1__getRegionCountry,
    // output parameters:
    _ns1__getRegionCountryResponse     &ns1__getRegionCountryResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWSSoapProxy.h generated with soapcpp2):
@code
  class WeatherWSSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWSSoapService.h generated with soapcpp2):
@code
  class WeatherWSSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRegionCountry SOAP
//gsoap ns1  service method-style:	getRegionCountry document
//gsoap ns1  service method-encoding:	getRegionCountry literal
//gsoap ns1  service method-input-action:	getRegionCountry http://WebXml.com.cn/getRegionCountry
//gsoap ns1  service method-output-action:	getRegionCountry http://WebXml.com.cn/getRegionCountryResponse
int __ns1__getRegionCountry(
    _ns1__getRegionCountry*             ns1__getRegionCountry,	///< Input parameter
    _ns1__getRegionCountryResponse     &ns1__getRegionCountryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSupportCityDataset                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSupportCityDataset" of service binding "WeatherWSSoap".
<br /><h3>/ID</h3><p>theRegionCode
= IDDataSet</p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getSupportCityDataset"

  - Addressing input action: "http://WebXml.com.cn/getSupportCityDataset"

  - Addressing output action: "http://WebXml.com.cn/getSupportCityDatasetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSupportCityDataset(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSupportCityDataset*        ns1__getSupportCityDataset,
    // output parameters:
    _ns1__getSupportCityDatasetResponse&ns1__getSupportCityDatasetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSupportCityDataset(
    struct soap *soap,
    // input parameters:
    _ns1__getSupportCityDataset*        ns1__getSupportCityDataset,
    // output parameters:
    _ns1__getSupportCityDatasetResponse&ns1__getSupportCityDatasetResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWSSoapProxy.h generated with soapcpp2):
@code
  class WeatherWSSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWSSoapService.h generated with soapcpp2):
@code
  class WeatherWSSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSupportCityDataset SOAP
//gsoap ns1  service method-style:	getSupportCityDataset document
//gsoap ns1  service method-encoding:	getSupportCityDataset literal
//gsoap ns1  service method-input-action:	getSupportCityDataset http://WebXml.com.cn/getSupportCityDataset
//gsoap ns1  service method-output-action:	getSupportCityDataset http://WebXml.com.cn/getSupportCityDatasetResponse
int __ns1__getSupportCityDataset(
    _ns1__getSupportCityDataset*        ns1__getSupportCityDataset,	///< Input parameter
    _ns1__getSupportCityDatasetResponse&ns1__getSupportCityDatasetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSupportCityString                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSupportCityString" of service binding "WeatherWSSoap".
<br /><h3>/ID</h3><p>theRegionCode
= ID</p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getSupportCityString"

  - Addressing input action: "http://WebXml.com.cn/getSupportCityString"

  - Addressing output action: "http://WebXml.com.cn/getSupportCityStringResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSupportCityString(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSupportCityString*         ns1__getSupportCityString,
    // output parameters:
    _ns1__getSupportCityStringResponse &ns1__getSupportCityStringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSupportCityString(
    struct soap *soap,
    // input parameters:
    _ns1__getSupportCityString*         ns1__getSupportCityString,
    // output parameters:
    _ns1__getSupportCityStringResponse &ns1__getSupportCityStringResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWSSoapProxy.h generated with soapcpp2):
@code
  class WeatherWSSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWSSoapService.h generated with soapcpp2):
@code
  class WeatherWSSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSupportCityString SOAP
//gsoap ns1  service method-style:	getSupportCityString document
//gsoap ns1  service method-encoding:	getSupportCityString literal
//gsoap ns1  service method-input-action:	getSupportCityString http://WebXml.com.cn/getSupportCityString
//gsoap ns1  service method-output-action:	getSupportCityString http://WebXml.com.cn/getSupportCityStringResponse
int __ns1__getSupportCityString(
    _ns1__getSupportCityString*         ns1__getSupportCityString,	///< Input parameter
    _ns1__getSupportCityStringResponse &ns1__getSupportCityStringResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getWeather                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getWeather" of service binding "WeatherWSSoap".
<br /><h3></h3><p>/ID</p><br
/>

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getWeather"

  - Addressing input action: "http://WebXml.com.cn/getWeather"

  - Addressing output action: "http://WebXml.com.cn/getWeatherResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getWeather(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getWeather*                   ns1__getWeather,
    // output parameters:
    _ns1__getWeatherResponse           &ns1__getWeatherResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getWeather(
    struct soap *soap,
    // input parameters:
    _ns1__getWeather*                   ns1__getWeather,
    // output parameters:
    _ns1__getWeatherResponse           &ns1__getWeatherResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWSSoapProxy.h generated with soapcpp2):
@code
  class WeatherWSSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWSSoapService.h generated with soapcpp2):
@code
  class WeatherWSSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getWeather SOAP
//gsoap ns1  service method-style:	getWeather document
//gsoap ns1  service method-encoding:	getWeather literal
//gsoap ns1  service method-input-action:	getWeather http://WebXml.com.cn/getWeather
//gsoap ns1  service method-output-action:	getWeather http://WebXml.com.cn/getWeatherResponse
int __ns1__getWeather(
    _ns1__getWeather*                   ns1__getWeather,	///< Input parameter
    _ns1__getWeatherResponse           &ns1__getWeatherResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRegionDataset_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getRegionDataset_" of service binding "WeatherWSSoap".
<br /><h3>ID</h3><p>DataSet</p><br
/>

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getRegionDataset"

  - Addressing input action: "http://WebXml.com.cn/getRegionDataset"

  - Addressing output action: "http://WebXml.com.cn/getRegionDatasetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRegionDataset_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getRegionDataset*             ns1__getRegionDataset,
    // output parameters:
    _ns1__getRegionDatasetResponse     &ns1__getRegionDatasetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRegionDataset_(
    struct soap *soap,
    // input parameters:
    _ns1__getRegionDataset*             ns1__getRegionDataset,
    // output parameters:
    _ns1__getRegionDatasetResponse     &ns1__getRegionDatasetResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWSSoapProxy.h generated with soapcpp2):
@code
  class WeatherWSSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWSSoapService.h generated with soapcpp2):
@code
  class WeatherWSSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRegionDataset_ SOAP
//gsoap ns1  service method-style:	getRegionDataset_ document
//gsoap ns1  service method-encoding:	getRegionDataset_ literal
//gsoap ns1  service method-input-action:	getRegionDataset_ http://WebXml.com.cn/getRegionDataset
//gsoap ns1  service method-output-action:	getRegionDataset_ http://WebXml.com.cn/getRegionDatasetResponse
int __ns1__getRegionDataset_(
    _ns1__getRegionDataset*             ns1__getRegionDataset,	///< Input parameter
    _ns1__getRegionDatasetResponse     &ns1__getRegionDatasetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRegionProvince_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getRegionProvince_" of service binding "WeatherWSSoap".
<br /><h3>ID</h3><p></p><br
/>

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getRegionProvince"

  - Addressing input action: "http://WebXml.com.cn/getRegionProvince"

  - Addressing output action: "http://WebXml.com.cn/getRegionProvinceResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRegionProvince_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getRegionProvince*            ns1__getRegionProvince,
    // output parameters:
    _ns1__getRegionProvinceResponse    &ns1__getRegionProvinceResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRegionProvince_(
    struct soap *soap,
    // input parameters:
    _ns1__getRegionProvince*            ns1__getRegionProvince,
    // output parameters:
    _ns1__getRegionProvinceResponse    &ns1__getRegionProvinceResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWSSoapProxy.h generated with soapcpp2):
@code
  class WeatherWSSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWSSoapService.h generated with soapcpp2):
@code
  class WeatherWSSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRegionProvince_ SOAP
//gsoap ns1  service method-style:	getRegionProvince_ document
//gsoap ns1  service method-encoding:	getRegionProvince_ literal
//gsoap ns1  service method-input-action:	getRegionProvince_ http://WebXml.com.cn/getRegionProvince
//gsoap ns1  service method-output-action:	getRegionProvince_ http://WebXml.com.cn/getRegionProvinceResponse
int __ns1__getRegionProvince_(
    _ns1__getRegionProvince*            ns1__getRegionProvince,	///< Input parameter
    _ns1__getRegionProvinceResponse    &ns1__getRegionProvinceResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRegionCountry_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getRegionCountry_" of service binding "WeatherWSSoap".
<br /><h3>ID</h3><p></p><br
/>

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getRegionCountry"

  - Addressing input action: "http://WebXml.com.cn/getRegionCountry"

  - Addressing output action: "http://WebXml.com.cn/getRegionCountryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRegionCountry_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getRegionCountry*             ns1__getRegionCountry,
    // output parameters:
    _ns1__getRegionCountryResponse     &ns1__getRegionCountryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRegionCountry_(
    struct soap *soap,
    // input parameters:
    _ns1__getRegionCountry*             ns1__getRegionCountry,
    // output parameters:
    _ns1__getRegionCountryResponse     &ns1__getRegionCountryResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWSSoapProxy.h generated with soapcpp2):
@code
  class WeatherWSSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWSSoapService.h generated with soapcpp2):
@code
  class WeatherWSSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRegionCountry_ SOAP
//gsoap ns1  service method-style:	getRegionCountry_ document
//gsoap ns1  service method-encoding:	getRegionCountry_ literal
//gsoap ns1  service method-input-action:	getRegionCountry_ http://WebXml.com.cn/getRegionCountry
//gsoap ns1  service method-output-action:	getRegionCountry_ http://WebXml.com.cn/getRegionCountryResponse
int __ns1__getRegionCountry_(
    _ns1__getRegionCountry*             ns1__getRegionCountry,	///< Input parameter
    _ns1__getRegionCountryResponse     &ns1__getRegionCountryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSupportCityDataset_                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSupportCityDataset_" of service binding "WeatherWSSoap".
<br /><h3>/ID</h3><p>theRegionCode
= IDDataSet</p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getSupportCityDataset"

  - Addressing input action: "http://WebXml.com.cn/getSupportCityDataset"

  - Addressing output action: "http://WebXml.com.cn/getSupportCityDatasetResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSupportCityDataset_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSupportCityDataset*        ns1__getSupportCityDataset,
    // output parameters:
    _ns1__getSupportCityDatasetResponse&ns1__getSupportCityDatasetResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSupportCityDataset_(
    struct soap *soap,
    // input parameters:
    _ns1__getSupportCityDataset*        ns1__getSupportCityDataset,
    // output parameters:
    _ns1__getSupportCityDatasetResponse&ns1__getSupportCityDatasetResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWSSoapProxy.h generated with soapcpp2):
@code
  class WeatherWSSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWSSoapService.h generated with soapcpp2):
@code
  class WeatherWSSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSupportCityDataset_ SOAP
//gsoap ns1  service method-style:	getSupportCityDataset_ document
//gsoap ns1  service method-encoding:	getSupportCityDataset_ literal
//gsoap ns1  service method-input-action:	getSupportCityDataset_ http://WebXml.com.cn/getSupportCityDataset
//gsoap ns1  service method-output-action:	getSupportCityDataset_ http://WebXml.com.cn/getSupportCityDatasetResponse
int __ns1__getSupportCityDataset_(
    _ns1__getSupportCityDataset*        ns1__getSupportCityDataset,	///< Input parameter
    _ns1__getSupportCityDatasetResponse&ns1__getSupportCityDatasetResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getSupportCityString_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getSupportCityString_" of service binding "WeatherWSSoap".
<br /><h3>/ID</h3><p>theRegionCode
= ID</p><br />

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getSupportCityString"

  - Addressing input action: "http://WebXml.com.cn/getSupportCityString"

  - Addressing output action: "http://WebXml.com.cn/getSupportCityStringResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getSupportCityString_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getSupportCityString*         ns1__getSupportCityString,
    // output parameters:
    _ns1__getSupportCityStringResponse &ns1__getSupportCityStringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getSupportCityString_(
    struct soap *soap,
    // input parameters:
    _ns1__getSupportCityString*         ns1__getSupportCityString,
    // output parameters:
    _ns1__getSupportCityStringResponse &ns1__getSupportCityStringResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWSSoapProxy.h generated with soapcpp2):
@code
  class WeatherWSSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWSSoapService.h generated with soapcpp2):
@code
  class WeatherWSSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getSupportCityString_ SOAP
//gsoap ns1  service method-style:	getSupportCityString_ document
//gsoap ns1  service method-encoding:	getSupportCityString_ literal
//gsoap ns1  service method-input-action:	getSupportCityString_ http://WebXml.com.cn/getSupportCityString
//gsoap ns1  service method-output-action:	getSupportCityString_ http://WebXml.com.cn/getSupportCityStringResponse
int __ns1__getSupportCityString_(
    _ns1__getSupportCityString*         ns1__getSupportCityString,	///< Input parameter
    _ns1__getSupportCityStringResponse &ns1__getSupportCityStringResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getWeather_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getWeather_" of service binding "WeatherWSSoap".
<br /><h3></h3><p>/ID</p><br
/>

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://ws.webxml.com.cn/WebServices/WeatherWS.asmx

  - Default SOAP action or REST location path:
    - "http://WebXml.com.cn/getWeather"

  - Addressing input action: "http://WebXml.com.cn/getWeather"

  - Addressing output action: "http://WebXml.com.cn/getWeatherResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getWeather_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getWeather*                   ns1__getWeather,
    // output parameters:
    _ns1__getWeatherResponse           &ns1__getWeatherResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getWeather_(
    struct soap *soap,
    // input parameters:
    _ns1__getWeather*                   ns1__getWeather,
    // output parameters:
    _ns1__getWeatherResponse           &ns1__getWeatherResponse
  );
@endcode

C++ proxy class (defined in soapWeatherWSSoapProxy.h generated with soapcpp2):
@code
  class WeatherWSSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWeatherWSSoapService.h generated with soapcpp2):
@code
  class WeatherWSSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getWeather_ SOAP
//gsoap ns1  service method-style:	getWeather_ document
//gsoap ns1  service method-encoding:	getWeather_ literal
//gsoap ns1  service method-input-action:	getWeather_ http://WebXml.com.cn/getWeather
//gsoap ns1  service method-output-action:	getWeather_ http://WebXml.com.cn/getWeatherResponse
int __ns1__getWeather_(
    _ns1__getWeather*                   ns1__getWeather,	///< Input parameter
    _ns1__getWeatherResponse           &ns1__getWeatherResponse	///< Output parameter
);

/** @page WeatherWSSoap Binding "WeatherWSSoap"

@section WeatherWSSoap_policy_enablers Policy Enablers of Binding "WeatherWSSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns1 Top-level root elements of schema "http://WebXml.com.cn/"

  - <ns1:getRegionDataset> @ref _ns1__getRegionDataset
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getRegionDataset(struct soap*, _ns1__getRegionDataset*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getRegionDataset(struct soap*, _ns1__getRegionDataset*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getRegionDataset(struct soap*, const char *URL, _ns1__getRegionDataset*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getRegionDataset(struct soap*, const char *URL, _ns1__getRegionDataset*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getRegionDataset(struct soap*, const char *URL, _ns1__getRegionDataset*);
    soap_POST_recv__ns1__getRegionDataset(struct soap*, _ns1__getRegionDataset*);
    @endcode

  - <ns1:getRegionDatasetResponse> @ref _ns1__getRegionDatasetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getRegionDatasetResponse(struct soap*, _ns1__getRegionDatasetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getRegionDatasetResponse(struct soap*, _ns1__getRegionDatasetResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getRegionDatasetResponse(struct soap*, const char *URL, _ns1__getRegionDatasetResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getRegionDatasetResponse(struct soap*, const char *URL, _ns1__getRegionDatasetResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getRegionDatasetResponse(struct soap*, const char *URL, _ns1__getRegionDatasetResponse*);
    soap_POST_recv__ns1__getRegionDatasetResponse(struct soap*, _ns1__getRegionDatasetResponse*);
    @endcode

  - <ns1:getRegionProvince> @ref _ns1__getRegionProvince
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getRegionProvince(struct soap*, _ns1__getRegionProvince*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getRegionProvince(struct soap*, _ns1__getRegionProvince*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getRegionProvince(struct soap*, const char *URL, _ns1__getRegionProvince*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getRegionProvince(struct soap*, const char *URL, _ns1__getRegionProvince*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getRegionProvince(struct soap*, const char *URL, _ns1__getRegionProvince*);
    soap_POST_recv__ns1__getRegionProvince(struct soap*, _ns1__getRegionProvince*);
    @endcode

  - <ns1:getRegionProvinceResponse> @ref _ns1__getRegionProvinceResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getRegionProvinceResponse(struct soap*, _ns1__getRegionProvinceResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getRegionProvinceResponse(struct soap*, _ns1__getRegionProvinceResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getRegionProvinceResponse(struct soap*, const char *URL, _ns1__getRegionProvinceResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getRegionProvinceResponse(struct soap*, const char *URL, _ns1__getRegionProvinceResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getRegionProvinceResponse(struct soap*, const char *URL, _ns1__getRegionProvinceResponse*);
    soap_POST_recv__ns1__getRegionProvinceResponse(struct soap*, _ns1__getRegionProvinceResponse*);
    @endcode

  - <ns1:getRegionCountry> @ref _ns1__getRegionCountry
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getRegionCountry(struct soap*, _ns1__getRegionCountry*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getRegionCountry(struct soap*, _ns1__getRegionCountry*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getRegionCountry(struct soap*, const char *URL, _ns1__getRegionCountry*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getRegionCountry(struct soap*, const char *URL, _ns1__getRegionCountry*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getRegionCountry(struct soap*, const char *URL, _ns1__getRegionCountry*);
    soap_POST_recv__ns1__getRegionCountry(struct soap*, _ns1__getRegionCountry*);
    @endcode

  - <ns1:getRegionCountryResponse> @ref _ns1__getRegionCountryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getRegionCountryResponse(struct soap*, _ns1__getRegionCountryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getRegionCountryResponse(struct soap*, _ns1__getRegionCountryResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getRegionCountryResponse(struct soap*, const char *URL, _ns1__getRegionCountryResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getRegionCountryResponse(struct soap*, const char *URL, _ns1__getRegionCountryResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getRegionCountryResponse(struct soap*, const char *URL, _ns1__getRegionCountryResponse*);
    soap_POST_recv__ns1__getRegionCountryResponse(struct soap*, _ns1__getRegionCountryResponse*);
    @endcode

  - <ns1:getSupportCityDataset> @ref _ns1__getSupportCityDataset
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSupportCityDataset(struct soap*, _ns1__getSupportCityDataset*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSupportCityDataset(struct soap*, _ns1__getSupportCityDataset*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getSupportCityDataset(struct soap*, const char *URL, _ns1__getSupportCityDataset*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getSupportCityDataset(struct soap*, const char *URL, _ns1__getSupportCityDataset*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getSupportCityDataset(struct soap*, const char *URL, _ns1__getSupportCityDataset*);
    soap_POST_recv__ns1__getSupportCityDataset(struct soap*, _ns1__getSupportCityDataset*);
    @endcode

  - <ns1:getSupportCityDatasetResponse> @ref _ns1__getSupportCityDatasetResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSupportCityDatasetResponse(struct soap*, _ns1__getSupportCityDatasetResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSupportCityDatasetResponse(struct soap*, _ns1__getSupportCityDatasetResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getSupportCityDatasetResponse(struct soap*, const char *URL, _ns1__getSupportCityDatasetResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getSupportCityDatasetResponse(struct soap*, const char *URL, _ns1__getSupportCityDatasetResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getSupportCityDatasetResponse(struct soap*, const char *URL, _ns1__getSupportCityDatasetResponse*);
    soap_POST_recv__ns1__getSupportCityDatasetResponse(struct soap*, _ns1__getSupportCityDatasetResponse*);
    @endcode

  - <ns1:getSupportCityString> @ref _ns1__getSupportCityString
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSupportCityString(struct soap*, _ns1__getSupportCityString*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSupportCityString(struct soap*, _ns1__getSupportCityString*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getSupportCityString(struct soap*, const char *URL, _ns1__getSupportCityString*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getSupportCityString(struct soap*, const char *URL, _ns1__getSupportCityString*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getSupportCityString(struct soap*, const char *URL, _ns1__getSupportCityString*);
    soap_POST_recv__ns1__getSupportCityString(struct soap*, _ns1__getSupportCityString*);
    @endcode

  - <ns1:getSupportCityStringResponse> @ref _ns1__getSupportCityStringResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getSupportCityStringResponse(struct soap*, _ns1__getSupportCityStringResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getSupportCityStringResponse(struct soap*, _ns1__getSupportCityStringResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getSupportCityStringResponse(struct soap*, const char *URL, _ns1__getSupportCityStringResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getSupportCityStringResponse(struct soap*, const char *URL, _ns1__getSupportCityStringResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getSupportCityStringResponse(struct soap*, const char *URL, _ns1__getSupportCityStringResponse*);
    soap_POST_recv__ns1__getSupportCityStringResponse(struct soap*, _ns1__getSupportCityStringResponse*);
    @endcode

  - <ns1:getWeather> @ref _ns1__getWeather
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getWeather(struct soap*, _ns1__getWeather*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getWeather(struct soap*, _ns1__getWeather*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getWeather(struct soap*, const char *URL, _ns1__getWeather*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getWeather(struct soap*, const char *URL, _ns1__getWeather*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getWeather(struct soap*, const char *URL, _ns1__getWeather*);
    soap_POST_recv__ns1__getWeather(struct soap*, _ns1__getWeather*);
    @endcode

  - <ns1:getWeatherResponse> @ref _ns1__getWeatherResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getWeatherResponse(struct soap*, _ns1__getWeatherResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getWeatherResponse(struct soap*, _ns1__getWeatherResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__getWeatherResponse(struct soap*, const char *URL, _ns1__getWeatherResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__getWeatherResponse(struct soap*, const char *URL, _ns1__getWeatherResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__getWeatherResponse(struct soap*, const char *URL, _ns1__getWeatherResponse*);
    soap_POST_recv__ns1__getWeatherResponse(struct soap*, _ns1__getWeatherResponse*);
    @endcode

  - <ns1:DataSet> @ref _ns1__DataSet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DataSet(struct soap*, _ns1__DataSet*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DataSet(struct soap*, _ns1__DataSet*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DataSet(struct soap*, const char *URL, _ns1__DataSet*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DataSet(struct soap*, const char *URL, _ns1__DataSet*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DataSet(struct soap*, const char *URL, _ns1__DataSet*);
    soap_POST_recv__ns1__DataSet(struct soap*, _ns1__DataSet*);
    @endcode

  - <ns1:ArrayOfString> (use wsdl2h option -g to auto-generate type _ns1__ArrayOfString)

*/

/* End of F:\OPT8443\webservice\WeatherDocking\WeatherDocking\weatherdocking.h */
